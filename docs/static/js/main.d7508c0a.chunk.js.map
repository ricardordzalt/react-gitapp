{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","Keys/giphy_api_key.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","prevCategories","handleSubmit","onChange","target","value","handleInputValue","type","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qNAiCeA,EA9BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAevC,OACI,0BAAMC,SAAU,SAACC,GAAD,OATC,SAAAA,GACjBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAc,OAAKP,GAAL,mBAAoBO,OAChDN,EAAc,KAKKO,CAAaL,KAChC,2BACIM,SAAU,SAACN,GAAD,OAfG,SAAAA,GACrBF,EAAcE,EAAEO,OAAOC,OAcEC,CAAiBT,IAClCU,KAAK,OACLF,MAAOX,M,uBCrBjBc,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAUH,GADpD,6BCFE,oCDEF,SAEMI,MAAMF,GAFZ,cAENG,EAFM,gBAGWA,EAAIC,OAHf,uBAGJC,EAHI,EAGJA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAR9B,kBAWLM,GAXK,4CAAH,sDESEO,EATK,SAAC,GAAsB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC9B,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCmBDO,EArBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAAA,GAAa,IAAD,EACHhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAHgB,mBACtBC,EADsB,KACfC,EADe,KAW7B,OALAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CAAEf,KAAMkB,EAAML,SAAS,SACnD,CAACpB,IAEGqB,EDRyBK,CAAa1B,GAAhCa,EAFiB,EAEvBN,KAAca,EAFS,EAETA,QAErB,OACI,oCACI,wBAAIJ,UAAU,qCAAqChB,GAElDoB,GAAW,0CAEZ,yBAAKJ,UAAU,aAEPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAASD,UEUxCkB,EAvBM,WAAO,IAAD,EACa5C,mBAAS,CAAC,cADvB,mBAChB6C,EADgB,KACJ9C,EADI,KAGvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BAEQ8C,EAAWpB,KAAI,SAAAT,GAAQ,OAEnB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAUA,UCZtC8B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.d7508c0a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputValue = e => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2){\n            setCategories(prevCategories => [inputValue, ...prevCategories]);\n            setInputValue('');\n        };\n    };\n\n    return(\n        <form onSubmit={(e) => handleSubmit(e)}>\n            <input\n                onChange={(e) => handleInputValue(e)}\n                type='text'\n                value={inputValue}\n            />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};\n\nexport default AddCategory;","import { GIPHY_KEY } from '../Keys/giphy_api_key';\n\nconst getGifs = async category => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${GIPHY_KEY}`\n    const res = await fetch(url);\n    const { data } = await res.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        };\n    });\n    return gifs;\n};\n\nexport { getGifs };","const GIPHY_KEY = 'rFf5VfEcFDBXPsycQS45FJEEkzEERBp4';\n\nexport { GIPHY_KEY };","import React from 'react';\n\nconst GifGridItem = ({ id, title, url}) => {\n    return(\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    );\n};\n\nexport default GifGridItem;","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n    const {data: images, loading} = useFetchGifs(category);\n\n    return(\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\n            {loading && <p>Cargando...</p>}\n\n            <div className='card-grid'>\n                { \n                    images.map(img => (\n                        <GifGridItem key={img.id} { ...img } />\n                    ))\n                }\n            </div>\n        </>\n    );\n};\n\nexport default GifGrid;","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nconst useFetchGifs = category => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => setState({ data: imgs, loading: false }));\n    }, [category]);\n    \n    return state;\n};\n\nexport { useFetchGifs };","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n            <ol>\n                { \n                    categories.map(category => \n                    (\n                        <GifGrid \n                            key={category} \n                            category={category} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render( \n  <GifExpertApp />, \n  document.getElementById('root')\n);"],"sourceRoot":""}